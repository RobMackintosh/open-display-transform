#line 1 // Fix line numbers in resolve/logs/rollinglog.txt
/*  Color Contrast -------------------------------------------------
      v0.0.2
      A tool to compress hues towards the primary color vectors. Pretty similar to n6HueShift
      but parameterized to compress or expand on both sides of a primary hue vector instead.

      Written by Jed Smith
      https://github.com/jedypod/open-display-transform

      License: GPL v3
-------------------------------------------------*/


DEFINE_UI_PARAMS(m0r, focus -  R low, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(m1r,          R high, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(m0g,          G low, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(m1g,          G high, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(m0b,          B low, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(m1b,          B high, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(p_sr, strength -  R, DCTLUI_SLIDER_FLOAT, 0.5, 0, 1, 0)
DEFINE_UI_PARAMS(p_sg,             G, DCTLUI_SLIDER_FLOAT, 0.5, 0, 1, 0)
DEFINE_UI_PARAMS(p_sb,             B, DCTLUI_SLIDER_FLOAT, 0.5, 0, 1, 0)
DEFINE_UI_PARAMS(p_wr, width -  R, DCTLUI_SLIDER_FLOAT, 0.5, 0, 1, 0)
DEFINE_UI_PARAMS(p_wg,          G, DCTLUI_SLIDER_FLOAT, 0.5, 0, 1, 0)
DEFINE_UI_PARAMS(p_wb,          B, DCTLUI_SLIDER_FLOAT, 0.5, 0, 1, 0)

DEFINE_UI_PARAMS(bias, bias, DCTLUI_SLIDER_FLOAT, 0.0, -2, 2, 0)




//----------------------------------------------------------------------------//


// Safe power function raising float a to power float b
__DEVICE__ float spowf(float a, float b) {
  if (a <= 0.0f) return a;
  else return _powf(a, b);
}

// Safe division of float a by float b
__DEVICE__ float sdivf(float a, float b) {
  if (b == 0.0f) return 0.0f;
  else return a/b;
}

// Safe division of float3 a by float b
__DEVICE__ float3 sdivf3f(float3 a, float b) {
  return make_float3(sdivf(a.x, b), sdivf(a.y, b), sdivf(a.z, b));
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) 
{
  // Parameter Setup
  float3 m0 = make_float3(1.0f - m0r, 1.0f - m0g, 1.0f - m0b);
  float3 m1 = make_float3(1.0f - m1r, 1.0f - m1g, 1.0f - m1b);
  
  float3 in = make_float3(p_R, p_G, p_B);

  // RGB Ratios
  float mx = _fmaxf(in.x, _fmaxf(in.y, in.z));
  mx = fabsf(mx) < 1e-4f ? 0.0f : mx;
  float3 rgb = sdivf3f(in, mx);
  float mn = _fmaxf(0.0f, _fminf(rgb.x, _fminf(rgb.y, rgb.z)));
  
  // Remove achromatic from RGB Ratios
  rgb = rgb - mn;

  // Mix between wide and narrow hue angles
  rgb = make_float3( _fminf(1.0f, _fmaxf(0.0f, rgb.x - (rgb.y + rgb.z)*(1.0f - p_wr))),
                              _fminf(1.0f, _fmaxf(0.0f, rgb.y - (rgb.x + rgb.z)*(1.0f - p_wg))),
                              _fminf(1.0f, _fmaxf(0.0f, rgb.z - (rgb.x + rgb.y)*(1.0f - p_wb))));
  
  // Apply power function to chroma to adjust strength
  rgb = make_float3(spowf(rgb.x, 1.0f/p_sr), spowf(rgb.y, 1.0f/p_sg), spowf(rgb.z, 1.0f/p_sb));
  

  // We make the hue distortion bidirectional by using a lerp factor based on a generic hyperbolic 
  // "tonescale" curve, biased by a power function. We use a Lift/Multiply linear function 
  // ( https://www.desmos.com/calculator/eaxwxrhrev ) to remap the input to the 0-2 range expected 
  // by the lerp (1.0 is no distortion, 2.0 is distorted towards the primary, 0.0 is distorted towards the secondary).
  float zr_f = sdivf(mx, _fmaxf(1e-6f, mx + 0.66f));
  zr_f = spowf(zr_f, spowf(2.0f, bias));

  float3 f = make_float3(zr_f*(m1.x-m0.x)+m0.x, zr_f*(m1.y-m0.y)+m0.y, zr_f*(m1.z-m0.z)+m0.z);

  // Do the hue distortion / compression / "focus", basically a 3-way lerp
  rgb = make_float3(
    in.x*f.y*rgb.y + in.x*f.z*rgb.z + in.x*(1.0f - (rgb.y + rgb.z)),
    in.y*f.x*rgb.x + in.y*f.z*rgb.z + in.y*(1.0f - (rgb.x + rgb.z)),
    in.z*f.x*rgb.x + in.z*f.y*rgb.y + in.z*(1.0f - (rgb.x + rgb.y)));

  return rgb;
}