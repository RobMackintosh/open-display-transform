#line 2 // Fix line numbers in resolve/logs/rollinglog.txt
/*  OpenDRT -------------------------------------------------
      v1.0.0b29
      Written by Jed Smith
      https://github.com/jedypod/open-display-transform

      License: GPL v3
-------------------------------------------------*/


// Tonescale Parameters
DEFINE_UI_PARAMS(tn_Lp, Display Peak Luminance, DCTLUI_SLIDER_FLOAT, 100.0, 100.0, 800.0, 0.0)
DEFINE_UI_PARAMS(tn_Lg, Display Grey Luminance, DCTLUI_SLIDER_FLOAT, 10.0, 3.0, 30.0, 0.0)
DEFINE_UI_PARAMS(tn_gb, Grey Boost, DCTLUI_SLIDER_FLOAT, 0.13, 0.0, 0.5, 0.0)

DEFINE_UI_PARAMS(look, Look Preset, DCTLUI_COMBO_BOX, 5, {look0, look1, look2, look3, look4, look5}, {base, default-lowcon, default-highcon, filmish, colorful, custom (un-comment all params in dctl)})

// Display Encoding / IO
DEFINE_UI_PARAMS(in_gamut, In Gamut, DCTLUI_COMBO_BOX, 15, {i_xyz, i_ap0, i_ap1, i_p3d65, i_rec2020, i_rec709, i_awg3, i_awg4, i_rwg, i_sgamut3, i_sgamut3cine, i_vgamut, i_bmdwg, i_egamut, i_egamut2, i_davinciwg}, {XYZ, ACES 2065-1, ACEScg, P3D65, Rec.2020, Rec.709, Arri Wide Gamut 3, Arri Wide Gamut 4, Red Wide Gamut RGB, Sony SGamut3, Sony SGamut3Cine, Panasonic V-Gamut, Blackmagic Wide Gamut, Filmlight E-Gamut, Filmlight E-Gamut2, DaVinci Wide Gamut})
DEFINE_UI_PARAMS(in_oetf, In Transfer Function, DCTLUI_COMBO_BOX, 1, {ioetf_linear, ioetf_davinci_intermediate, ioetf_filmlight_tlog, ioetf_arri_logc3, ioetf_arri_logc4, ioetf_panasonic_vlog, ioetf_sony_slog3, ioetf_fuji_flog}, {Linear, Davinci Intermediate, Filmlight T-Log, Arri LogC3, Arri LogC4, Panasonic V-Log, Sony S-Log3, Fuji F-Log})
DEFINE_UI_PARAMS(display_gamut, Display Gamut, DCTLUI_COMBO_BOX, 0, {Rec709, P3D65, Rec2020}, {Rec.709, P3-D65, Rec.2020 (P3 Limited)})
DEFINE_UI_PARAMS(EOTF, Display EOTF, DCTLUI_COMBO_BOX, 2, {lin, srgb, rec1886, dci, pq, hlg}, {Linear, 2.2 Power sRGB Display, 2.4 Power Rec.1886, 2.6 Power DCI, ST 2084 PQ, HLG})




/* Un-Comment below this line to enable custom look creation
---------------------------------------------------------------------------------------*/

// Tonescale Parameters
DEFINE_UI_PARAMS(_tn_con, Tonescale Contrast, DCTLUI_SLIDER_FLOAT, 1.4, 1.0, 2.0, 0.0)
DEFINE_UI_PARAMS(_tn_toe, Tonescale Toe, DCTLUI_SLIDER_FLOAT, 0.001, 0.0, 0.01, 0.0)
DEFINE_UI_PARAMS(_tn_off, Tonescale Offset, DCTLUI_SLIDER_FLOAT, 0.001, 0.0, 0.01, 0.0)
DEFINE_UI_PARAMS(_tn_mcon_enable, Enable Mid Contrast, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(_tn_mcon, Mid Contrast, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 3.0, 0.0)
DEFINE_UI_PARAMS(_tn_mcon_w, Mid Contrast Width, DCTLUI_SLIDER_FLOAT, 0.6, 0.0, 1.0, 0.0)
DEFINE_UI_PARAMS(_tn_mcon_rp, Ratio Preserve, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.0)

// Rendering Space Parameters
DEFINE_UI_PARAMS(_rs_sa, Render Space Saturation, DCTLUI_SLIDER_FLOAT, 0.45, 0.0, 0.8, 0.0)
DEFINE_UI_PARAMS(_rs_rw, Render Space Weight R, DCTLUI_SLIDER_FLOAT, 0.2, 0.0, 0.5, 0.0)
DEFINE_UI_PARAMS(_rs_bw, Render Space Weight B, DCTLUI_SLIDER_FLOAT, 0.2, 0.0, 0.5, 0.0)

// Purity Compression Parameters
DEFINE_UI_PARAMS(_pt_cmp, Base Purity Compress, DCTLUI_SLIDER_FLOAT, 0.3, 0.0, 1.0, 0.0)
DEFINE_UI_PARAMS(_pt_cmp_hdr, Base Purity Compress HDR, DCTLUI_SLIDER_FLOAT, 0.7, 0.0, 1.0, 0.0)
DEFINE_UI_PARAMS(_pt_cmp_r, Purity Compress R, DCTLUI_SLIDER_FLOAT, 0.25, 0.0, 1.0, 0.0)
DEFINE_UI_PARAMS(_pt_cmp_g, Purity Compress G, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.0)
DEFINE_UI_PARAMS(_pt_cmp_b, Purity Compress B, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.0)

// Midrange Purity
DEFINE_UI_PARAMS(_pt_mid_enable, Enable Mid Purity, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(_pt_mid_low, Mid Purity Low, DCTLUI_SLIDER_FLOAT, 1.2, 1.0, 2.0, 0.0)
DEFINE_UI_PARAMS(_pt_mid_high, Mid Purity High, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.0)
DEFINE_UI_PARAMS(_pt_softclip, Enable Purity Softclip, DCTLUI_CHECK_BOX, 1)

// Density Parameters
DEFINE_UI_PARAMS(_dn_enable, Enable Density, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(_dn_r, Density R, DCTLUI_SLIDER_FLOAT, -0.33, -0.6, 0.3, 0.0)
DEFINE_UI_PARAMS(_dn_g, Density G, DCTLUI_SLIDER_FLOAT, -0.3, -0.6, 0.3, 0.0)
DEFINE_UI_PARAMS(_dn_b, Density B, DCTLUI_SLIDER_FLOAT, -0.2, -0.6, 0.3, 0.0)
DEFINE_UI_PARAMS(_dn_c, Density C, DCTLUI_SLIDER_FLOAT, -0.15, -0.6, 0.3, 0.0)
DEFINE_UI_PARAMS(_dn_m, Density M, DCTLUI_SLIDER_FLOAT, -0.2, -0.6, 0.3, 0.0)
DEFINE_UI_PARAMS(_dn_y, Density Y, DCTLUI_SLIDER_FLOAT, 0.2, -0.6, 0.3, 0.0)
DEFINE_UI_PARAMS(_dn_rng, Density Range, DCTLUI_SLIDER_FLOAT, 0.75, 0.0, 1.0, 0.0)
DEFINE_UI_PARAMS(_dn_st, Density Strength, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.0)

// HueShift Parameters
DEFINE_UI_PARAMS(_hs_rgb_enable, Enable Hueshift RGB, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(_hs_r, Hueshift R, DCTLUI_SLIDER_FLOAT, 0.25, 0.0, 0.6, 0.0)
DEFINE_UI_PARAMS(_hs_g, Hueshift G, DCTLUI_SLIDER_FLOAT, 0.2, 0.0, 0.6, 0.0)
DEFINE_UI_PARAMS(_hs_b, Hueshift B, DCTLUI_SLIDER_FLOAT, 0.2, 0.0, 0.6, 0.0)
DEFINE_UI_PARAMS(_hs_rng_r, HuesHift Range R, DCTLUI_SLIDER_FLOAT, 0.5, -3.0, 3.0, 0.0)
DEFINE_UI_PARAMS(_hs_rng_g, HuesHift Range G, DCTLUI_SLIDER_FLOAT, 2.0, -3.0, 3.0, 0.0)
DEFINE_UI_PARAMS(_hs_rng_b, HuesHift Range B, DCTLUI_SLIDER_FLOAT, 0.5, -3.0, 3.0, 0.0)
DEFINE_UI_PARAMS(_hs_cmy_enable, Enable Hueshift CMY, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(_hs_c, Hueshift C, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 0.6, 0.0)
DEFINE_UI_PARAMS(_hs_m, Hueshift M, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 0.6, 0.0)
DEFINE_UI_PARAMS(_hs_y, Hueshift Y, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 0.6, 0.0)
DEFINE_UI_PARAMS(_hs_rng_c, HuesHift Range C, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.0)
DEFINE_UI_PARAMS(_hs_rng_m, HuesHift Range M, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.0)
DEFINE_UI_PARAMS(_hs_rng_y, HuesHift Range Y, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.0)
DEFINE_UI_PARAMS(_hs_st_c, Hueshift Strength C, DCTLUI_SLIDER_FLOAT, 0.6, 0.0, 1.0, 0.0)
DEFINE_UI_PARAMS(_hs_st_y, Hueshift Strength Y, DCTLUI_SLIDER_FLOAT, 0.6, 0.0, 1.0, 0.0)

// HueFocus Parameters
DEFINE_UI_PARAMS(_hf_enable, Enable Huefocus, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(_hf_r0, Huefocus R Low, DCTLUI_SLIDER_FLOAT, 0.25, 0.0, 0.5, 0.0)
DEFINE_UI_PARAMS(_hf_r1, Huefocus R High, DCTLUI_SLIDER_FLOAT, -0.6, -0.8, 0.0, 0.0)
DEFINE_UI_PARAMS(_hf_g0, Huefocus G Low, DCTLUI_SLIDER_FLOAT, 0.1, -0.8, 0.5, 0.0)
DEFINE_UI_PARAMS(_hf_g1, Huefocus G High, DCTLUI_SLIDER_FLOAT, -0.6, -0.8, 0.0, 0.0)
DEFINE_UI_PARAMS(_hf_b0, Huefocus B Low, DCTLUI_SLIDER_FLOAT, 0.2, 0.0, 0.5, 0.0)
DEFINE_UI_PARAMS(_hf_b1, Huefocus B High, DCTLUI_SLIDER_FLOAT, -0.3, -0.8, 0.0, 0.0)
DEFINE_UI_PARAMS(_hf_st_r, Huefocus Strength R, DCTLUI_SLIDER_FLOAT, 1.0, -3.0, 3.0, 0.0)
DEFINE_UI_PARAMS(_hf_st_g, Huefocus Strength G, DCTLUI_SLIDER_FLOAT, 2.0, -3.0, 3.0, 0.0)
DEFINE_UI_PARAMS(_hf_st_b, Huefocus Strength B, DCTLUI_SLIDER_FLOAT, -1.0, -3.0, 3.0, 0.0)

// Creative White
DEFINE_UI_PARAMS(_cwp, Creative White, DCTLUI_COMBO_BOX, 0, {d65, d60, d55, d50}, {D65, D60, D55, D50})

/*---------------------------------------------------------------------------------------
  Un-Comment above this line to enable custom look creation   */





// Gamut Conversion Matrices
#define matrix_ap0_to_xyz make_float3x3(make_float3(0.93863094875f, -0.00574192055f, 0.017566898852f), make_float3(0.338093594922f, 0.727213902811f, -0.065307497733f), make_float3(0.000723121511f, 0.000818441849f, 1.0875161874f))
#define matrix_ap1_to_xyz make_float3x3(make_float3(0.652418717672f, 0.127179925538f, 0.170857283842f), make_float3(0.268064059194f, 0.672464478993f, 0.059471461813f), make_float3(-0.00546992851f, 0.005182799977f, 1.08934487929f))
#define matrix_rec709_to_xyz make_float3x3(make_float3(0.412390917540f, 0.357584357262f, 0.180480793118f), make_float3(0.212639078498f, 0.715168714523f, 0.072192311287f), make_float3(0.019330825657f, 0.119194783270f, 0.950532138348f))
#define matrix_p3d65_to_xyz make_float3x3(make_float3(0.486571133137f, 0.265667706728f, 0.198217317462f), make_float3(0.228974640369f, 0.691738605499f, 0.079286918044f), make_float3(0.0f, 0.045113388449, 1.043944478035f))
#define matrix_xyz_to_p3d65 make_float3x3(make_float3(2.49349691194f, -0.931383617919f, -0.402710784451f), make_float3(-0.829488969562f, 1.76266406032f, 0.023624685842f), make_float3(0.035845830244f, -0.076172389268f, 0.956884524008f))
#define matrix_rec2020_to_xyz make_float3x3(make_float3(0.636958122253f, 0.144616916776f, 0.168880969286f), make_float3(0.262700229883f, 0.677998125553f, 0.059301715344f), make_float3(0.0f, 0.028072696179, 1.060985088348f))
#define matrix_arriwg3_to_xyz make_float3x3(make_float3(0.638007619284f, 0.214703856337f, 0.097744451431f), make_float3(0.291953779f, 0.823841041511f, -0.11579482051f), make_float3(0.002798279032f, -0.067034235689f, 1.15329370742f))
#define matrix_arriwg4_to_xyz make_float3x3(make_float3(0.704858320407f, 0.12976029517f, 0.115837311474f), make_float3(0.254524176404f, 0.781477732712f, -0.036001909116f), make_float3(0.0f, 0.0f, 1.08905775076f))
#define matrix_redwg_to_xyz make_float3x3(make_float3(0.735275208950f, 0.068609409034f, 0.146571278572f), make_float3(0.286694079638f, 0.842979073524f, -0.129673242569f), make_float3(-0.079680845141f, -0.347343206406, 1.516081929207f))
#define matrix_sonysgamut3_to_xyz make_float3x3(make_float3(0.706482713192f, 0.128801049791f, 0.115172164069f), make_float3(0.270979670813f, 0.786606411221f, -0.057586082034f), make_float3(-0.009677845386f, 0.004600037493f, 1.09413555865f))
#define matrix_sonysgamut3cine_to_xyz make_float3x3(make_float3(0.599083920758f, 0.248925516115f, 0.102446490178f), make_float3(0.215075820116f, 0.885068501744f, -0.100144321859f), make_float3(-0.032065849545f, -0.027658390679f, 1.14878199098f))
#define matrix_vgamut_to_xyz make_float3x3(make_float3(0.679644469878f, 0.15221141244f, 0.118600044733), make_float3(0.26068555009f, 0.77489446333f, -0.03558001342), make_float3(-0.009310198218f, -0.004612467044f, 1.10298041602))
#define matrix_bmdwg_to_xyz make_float3x3(make_float3(0.606538414955f, 0.220412746072f, 0.123504832387f), make_float3(0.267992943525f, 0.832748472691f, -0.100741356611f), make_float3(-0.029442556202f, -0.086612440646, 1.205112814903f))
#define matrix_egamut_to_xyz make_float3x3(make_float3(0.705396831036f, 0.164041340351f, 0.081017754972f), make_float3(0.280130714178f, 0.820206701756f, -0.100337378681f), make_float3(-0.103781513870f, -0.072907261550, 1.265746593475f))
#define matrix_egamut2_to_xyz make_float3x3(make_float3(0.736477700184f, 0.130739651087f, 0.083238575781f), make_float3(0.275069984406f, 0.828017790216f, -0.103087774621f), make_float3(-0.124225154248f, -0.087159767391f, 1.3004426724f))
#define matrix_davinciwg_to_xyz make_float3x3(make_float3(0.700622320175f, 0.148774802685f, 0.101058728993f), make_float3(0.274118483067f, 0.873631775379f, -0.147750422359f), make_float3(-0.098962903023f, -0.137895315886, 1.325916051865f))

// Display gamuts with Normalized adaptation matrices for other creative whitepoints (CAT02)
#define matrix_p3_to_p3_d50 make_float3x3(make_float3(0.9287127388f, 0.06578032793f, 0.005506708345f), make_float3(-0.002887159176f, 0.8640709228f, 4.3593718e-05f), make_float3(-0.001009551548f, -0.01073503317f, 0.6672692039f))
#define matrix_p3_to_p3_d55 make_float3x3(make_float3(0.9559790976f, 0.0403850003f, 0.003639287409f), make_float3(-0.001771929896f, 0.9163058305f, 3.3300759e-05f), make_float3(-0.000674760809f, -0.0072466358f, 0.7831189153f))
#define matrix_p3_to_p3_d60 make_float3x3(make_float3(0.979832881f, 0.01836378979f, 0.001803284786f), make_float3(-0.000805359793f, 0.9618000331f, 1.8876121e-05f), make_float3(-0.000338382322f, -0.003671835795f, 0.894139105f))
#define matrix_p3_to_rec709_d50 make_float3x3(make_float3(1.103807322f, -0.1103425121f, 0.006531676079f), make_float3(-0.04079386701f, 0.8704694227f, -0.000180522628f), make_float3(-0.01854055914f, -0.07857582481f, 0.7105498861f))
#define matrix_p3_to_rec709_d55 make_float3x3(make_float3(1.149327514f, -0.1536910745f, 0.004366526746f), make_float3(-0.0412590771f, 0.9351717477f, -0.000116126221f), make_float3(-0.01900949528f, -0.07928282823f, 0.8437884317f))
#define matrix_p3_to_rec709_d60 make_float3x3(make_float3(1.189986856f, -0.192168414f, 0.002185496045f), make_float3(-0.04168263635f, 0.9927757018f, -5.5660878e-05f), make_float3(-0.01937995127f, -0.07933006919f, 0.9734397041f))
#define matrix_p3_to_rec709_d65 make_float3x3(make_float3(1.224940181f, -0.2249402404f, 0.0f), make_float3(-0.04205697775f, 1.042057037f, -1.4901e-08f), make_float3(-0.01963755488f, -0.07863604277f, 1.098273635f))
#define matrix_p3_to_rec2020 make_float3x3(make_float3(0.7538330344f, 0.1985973691f, 0.04756959659f), make_float3(0.04574384897f, 0.9417772198f, 0.01247893122f), make_float3(-0.001210340355f, 0.0176017173f, 0.9836086231f))




/* Math helper functions ----------------------------*/

typedef struct {
  float3 x, y, z;
} float3x3;

// Helper function to create a float3x3
__DEVICE__ float3x3 make_float3x3(float3 a, float3 b, float3 c) {
  float3x3 d;
  d.x = a, d.y = b, d.z = c;
  return d;
}

// Return identity 3x3 matrix
__DEVICE__ float3x3 identity() {
  return make_float3x3(make_float3(1.0f, 0.0f, 0.0f), make_float3(0.0f, 1.0f, 0.0f), make_float3(0.0f, 0.0f, 1.0f));
}

// Multiply 3x3 matrix m and float3 vector v
__DEVICE__ float3 vdot(float3x3 m, float3 v) {
  return make_float3(m.x.x*v.x + m.x.y*v.y + m.x.z*v.z, m.y.x*v.x + m.y.y*v.y + m.y.z*v.z, m.z.x*v.x + m.z.y*v.y + m.z.z*v.z);
}

// Safe division of float a by float b
__DEVICE__ float sdivf(float a, float b) {
  if (b == 0.0f) return 0.0f;
  else return a/b;
}

// Safe division of float3 a by float b
__DEVICE__ float3 sdivf3f(float3 a, float b) {
  return make_float3(sdivf(a.x, b), sdivf(a.y, b), sdivf(a.z, b));
}

// Safe element-wise division of float3 a by float3 b
__DEVICE__ float3 sdivf3f3(float3 a, float3 b) {
  return make_float3(sdivf(a.x, b.x), sdivf(a.y, b.y), sdivf(a.z, b.z));
}

// Safe power function raising float a to power float b
__DEVICE__ float spowf(float a, float b) {
  if (a <= 0.0f) return a;
  else return _powf(a, b);
}

// Safe power function raising float3 a to power float b
__DEVICE__ float3 spowf3(float3 a, float b) {
  return make_float3(spowf(a.x, b), spowf(a.y, b), spowf(a.z, b));
}

// Return the hypot or length of float3 a
__DEVICE__ float hypotf3(float3 a) { return  _sqrtf(spowf(a.x, 2.0f) + spowf(a.y, 2.0f) + spowf(a.z, 2.0f)); }

// Return the min of float3 a
__DEVICE__ float fmaxf3(float3 a) { return _fmaxf(a.x, _fmaxf(a.y, a.z)); }

// Return the max of float3 a
__DEVICE__ float fminf3(float3 a) { return _fminf(a.x, _fminf(a.y, a.z)); }

// Clamp float3 a to max value mx
__DEVICE__ float3 clampmaxf3(float3 a, float mx) { return make_float3(_fminf(a.x, mx), _fminf(a.y, mx), _fminf(a.z, mx)); }

// Clamp float3 a to min value mn
__DEVICE__ float3 clampminf3(float3 a, float mn) { return make_float3(_fmaxf(a.x, mn), _fmaxf(a.y, mn), _fmaxf(a.z, mn)); }

// Clamp each component of float3 a to be between float mn and float mx
__DEVICE__ float3 clampf3(float3 a, float mn, float mx) { 
  return make_float3(_fminf(_fmaxf(a.x, mn), mx), _fminf(_fmaxf(a.y, mn), mx), _fminf(_fmaxf(a.z, mn), mx));
}


/* OETF Linearization Transfer Functions ---------------------------------------- */

__DEVICE__ float oetf_davinci_intermediate(float x) {
    return x <= 0.02740668f ? x/10.44426855f : _exp2f(x/0.07329248f - 7.0f) - 0.0075f;
}

__DEVICE__ float oetf_filmlight_tlog(float x) {
  return x < 0.075f ? (x-0.075f)/16.184376489665897f : _expf((x - 0.5520126568606655f)/0.09232902596577353f) - 0.0057048244042473785f;
}
__DEVICE__ float oetf_arri_logc3(float x) {
  return x < 5.367655f*0.010591f + 0.092809f ? (x - 0.092809f)/5.367655f : (_exp10f((x - 0.385537f)/0.247190f) - 0.052272f)/5.555556f;
}

__DEVICE__ float oetf_arri_logc4(float x) {
  return x < -0.7774983977293537f ? x*0.3033266726886969f - 0.7774983977293537f : (_exp2f(14.0f*(x - 0.09286412512218964f)/0.9071358748778103f + 6.0f) - 64.0f)/2231.8263090676883f;
}

__DEVICE__ float oetf_panasonic_vlog(float x) {
  return x < 0.181f ? (x - 0.125f)/5.6f : _exp10f((x - 0.598206f)/0.241514f) - 0.00873f;
}

__DEVICE__ float oetf_sony_slog3(float x) {
  return x < 171.2102946929f/1023.0f ? (x*1023.0f - 95.0f)*0.01125f/(171.2102946929f - 95.0f) : (_exp10f(((x*1023.0f - 420.0f)/261.5f))*(0.18f + 0.01f) - 0.01f);
}

__DEVICE__ float oetf_fujifilm_flog(float x) {
  return x < 0.1005377752f ? (x - 0.092864f)/8.735631f : (_exp10f(((x - 0.790453f)/0.344676f))/0.555556f - 0.009468f/0.555556f);
}


__DEVICE__ float3 linearize(float3 rgb, int tf) {
  if (tf == 0) { // Linear
    return rgb;
  } else if (tf == 1) { // Davinci Intermediate
    rgb.x = oetf_davinci_intermediate(rgb.x);
    rgb.y = oetf_davinci_intermediate(rgb.y);
    rgb.z = oetf_davinci_intermediate(rgb.z);
  } else if (tf == 2) { // Filmlight T-Log
    rgb.x = oetf_filmlight_tlog(rgb.x);
    rgb.y = oetf_filmlight_tlog(rgb.y);
    rgb.z = oetf_filmlight_tlog(rgb.z);
  } else if (tf == 3) { // Arri LogC3
    rgb.x = oetf_arri_logc3(rgb.x);
    rgb.y = oetf_arri_logc3(rgb.y);
    rgb.z = oetf_arri_logc3(rgb.z);
  } else if (tf == 4) { // Arri LogC4
    rgb.x = oetf_arri_logc4(rgb.x);
    rgb.y = oetf_arri_logc4(rgb.y);
    rgb.z = oetf_arri_logc4(rgb.z);
  } else if (tf == 5) { // Panasonic V-Log
    rgb.x = oetf_panasonic_vlog(rgb.x);
    rgb.y = oetf_panasonic_vlog(rgb.y);
    rgb.z = oetf_panasonic_vlog(rgb.z);
  } else if (tf == 6) { // Sony S-Log3
    rgb.x = oetf_sony_slog3(rgb.x);
    rgb.y = oetf_sony_slog3(rgb.y);
    rgb.z = oetf_sony_slog3(rgb.z);
  } else if (tf == 7) { // Fuji F-Log
    rgb.x = oetf_fujifilm_flog(rgb.x);
    rgb.y = oetf_fujifilm_flog(rgb.y);
    rgb.z = oetf_fujifilm_flog(rgb.z);
  }
  return rgb;
}



/* EOTF Transfer Functions ---------------------------------------- */

__DEVICE__ float3 eotf_hlg(float3 rgb, int inverse) {
  /* Apply the HLG Forward or Inverse EOTF for 1000 nits. 
      ITU-R Rec BT.2100-2 https://www.itu.int/rec/R-REC-BT.2100 
      ITU-R Rep BT.2390-8: https://www.itu.int/pub/R-REP-BT.2390
  */
  
  if (inverse == 1) {
    float Yd = 0.2627f*rgb.x + 0.6780f*rgb.y + 0.0593f*rgb.z;
    rgb = rgb*spowf(Yd, (1.0f - 1.2f)/1.2f);
    rgb.x = rgb.x <= 1.0f/12.0f ? _sqrtf(3.0f*rgb.x) : 0.17883277f*_logf(12.0f*rgb.x - 0.28466892f) + 0.55991073f;
    rgb.y = rgb.y <= 1.0f/12.0f ? _sqrtf(3.0f*rgb.y) : 0.17883277f*_logf(12.0f*rgb.y - 0.28466892f) + 0.55991073f;
    rgb.z = rgb.z <= 1.0f/12.0f ? _sqrtf(3.0f*rgb.z) : 0.17883277f*_logf(12.0f*rgb.z - 0.28466892f) + 0.55991073f;
  } else {
    rgb.x = rgb.x <= 0.5f ? rgb.x*rgb.x/3.0f : (_expf((rgb.x - 0.55991073f)/0.17883277f) + 0.28466892f)/12.0f;
    rgb.y = rgb.y <= 0.5f ? rgb.y*rgb.y/3.0f : (_expf((rgb.y - 0.55991073f)/0.17883277f) + 0.28466892f)/12.0f;
    rgb.z = rgb.z <= 0.5f ? rgb.z*rgb.z/3.0f : (_expf((rgb.z - 0.55991073f)/0.17883277f) + 0.28466892f)/12.0f;
    float Ys = 0.2627f*rgb.x + 0.6780f*rgb.y + 0.0593f*rgb.z;
    rgb = rgb*spowf(Ys, 1.2f - 1.0f);
  }
  return rgb;
}


__DEVICE__ float3 eotf_pq(float3 rgb, int inverse) {
  /* Apply the ST-2084 PQ Forward or Inverse EOTF
      ITU-R Rec BT.2100-2 https://www.itu.int/rec/R-REC-BT.2100
      ITU-R Rep BT.2390-9 https://www.itu.int/pub/R-REP-BT.2390
      Note: in the spec there is a normalization for peak display luminance. 
      For this function we assume the input is already normalized such that 1.0 = 10,000 nits
  */
  
  const float m1 = 2610.0f/16384.0f;
  const float m2 = 2523.0f/32.0f;
  const float c1 = 107.0f/128.0f;
  const float c2 = 2413.0f/128.0f;
  const float c3 = 2392.0f/128.0f;

  if (inverse == 1) {
    rgb = spowf3(rgb, m1);
    rgb = spowf3((c1 + c2*rgb)/(1.0f + c3*rgb), m2);
  } else {
    rgb = spowf3(rgb, 1.0f/m2);
    rgb = spowf3((rgb - c1)/(c2 - c3*rgb), 1.0f/m1);
  }
  return rgb;
}


/* Functions for OpenDRT ---------------------------------------- */

__DEVICE__ float compress_powerp(float x, float p) {
  // Unconstrained variable slope compression function. https://www.desmos.com/calculator/flquiy0s0y
  return x < 0.0f ? x : x*spowf(1.0f + spowf(x, 1.0f/p), -p);
}

__DEVICE__ float compress_hyperbolic(float x, float s, float p) {
  // Simple hyperbolic compression function https://www.desmos.com/calculator/ofwtcmzc3w
  return spowf(x/(x + s), p);
}

__DEVICE__ float compress_toe_quadratic(float x, float toe, int inv) {
  // Quadratic toe compress function https://www.desmos.com/calculator/skk8ahmnws
  if (toe == 0.0f) return x;
  if (inv == 0) {
    return spowf(x, 2.0f)/(x + toe);
  } else {
    return (x + _sqrtf(x*(4.0f*toe + x)))/2.0f;
  }
}

__DEVICE__ float3 narrow_ha(float3 c) {
  return make_float3(_fmaxf(0.0f, c.x - (c.y + c.z)), _fmaxf(0.0f, c.y - (c.x + c.z)), _fmaxf(0.0f, c.z - (c.x + c.y)));
}


__DEVICE__ float compress_toe_cubic(float x, float m, float w, int inv) {
  // https://www.desmos.com/calculator/ubgteikoke
  float x2 = x*x;

  if (inv == 0) {
    return x*(x2 + m*w)/(x2 + w);
  } else {
    float p0 = x2 - 3.0f*m*w;
    float p1 = 2.0f*x2 + 27.0f*w - 9.0f*m*w;
    float p2 = _powf(_sqrtf(x2*p1*p1 - 4*p0*p0*p0)/2.0f + x*p1/2.0f, 1.0f/3.0f);
    return p0/(3.0f*p2) + p2/3.0f + x/3.0f;
  }
}


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
  float3 rgb = make_float3(p_R, p_G, p_B);

  /*****************************************************
    Parameter Setup
    --------------------------------------------------*/
  
  // Init look preset variables
  int tn_mcon_enable, cwp, pt_mid_enable, pt_softclip, dn_enable, hs_rgb_enable, hs_cmy_enable, hf_enable;
  float tn_con, tn_toe, tn_off, tn_mcon, tn_mcon_w, tn_mcon_rp, rs_sa, rs_rw, rs_bw, pt_cmp, pt_cmp_hdr, pt_cmp_r, pt_cmp_g, pt_cmp_b, pt_mid_low, pt_mid_high, dn_r, dn_g, dn_b, dn_c, dn_m, dn_y, dn_rng, dn_st, hs_r, hs_g, hs_b, hs_rng_r, hs_rng_g, hs_rng_b, hs_c, hs_m, hs_y, hs_rng_c, hs_rng_m, hs_rng_y, hs_st_c, hs_st_y, hf_r0, hf_r1, hf_g0, hf_g1, hf_b0, hf_b1, hf_st_r, hf_st_g, hf_st_b;

  if (look==look0) { // base
    tn_con = 1.4f, tn_toe = 0.001f, tn_off = 0.001f, tn_mcon_enable = 0, tn_mcon = 0.0f, tn_mcon_w = 0.6f, tn_mcon_rp = 0.0f, cwp = 0, rs_sa = 0.45f, rs_rw = 0.2f, rs_bw = 0.2f, pt_cmp = 0.3f, pt_cmp_hdr = 0.7f, pt_cmp_r = 0.25f, pt_cmp_g = 0.0f, pt_cmp_b = 0.5f, pt_mid_enable = 0, pt_mid_low = 1.0f, pt_mid_high = 1.0f, pt_softclip = 1, dn_enable = 1, dn_r = -0.33f, dn_g = -0.3f, dn_b = -0.2f, dn_c = -0.15f, dn_m = -0.2f, dn_y = 0.2f, dn_rng = 0.75f, dn_st = 0.5f, hs_rgb_enable = 0, hs_r = 0.0f, hs_g = 0.0f, hs_b = 0.0f, hs_rng_r = 0.0f, hs_rng_g = 0.0f, hs_rng_b = 0.0f, hs_cmy_enable = 0, hs_c = 0.0f, hs_m = 0.0f, hs_y = 0.0f, hs_rng_c = 0.0f, hs_rng_m = 0.0f, hs_rng_y = 0.0f, hs_st_c = 0.6f, hs_st_y = 0.6f, hf_enable = 0, hf_r0 = 0.0f, hf_r1 = 0.0f, hf_g0 = 0.0f, hf_g1 = 0.0f, hf_b0 = 0.0f, hf_b1 = 0.0f, hf_st_r = 0.0f, hf_st_g = 0.0f, hf_st_b = 0.0f;
  }
  else if (look==look1) { // default-lowcon
    tn_con = 1.4f, tn_toe = 0.001f, tn_off = 0.001f, tn_mcon_enable = 0, tn_mcon = 0.0f, tn_mcon_w = 0.6f, tn_mcon_rp = 0.0f, cwp = 0, rs_sa = 0.45f, rs_rw = 0.2f, rs_bw = 0.2f, pt_cmp = 0.3f, pt_cmp_hdr = 0.7f, pt_cmp_r = 0.25f, pt_cmp_g = 0.0f, pt_cmp_b = 0.5f, pt_mid_enable = 1, pt_mid_low = 1.2f, pt_mid_high = 0.0f, pt_softclip = 1, dn_enable = 1, dn_r = -0.33f, dn_g = -0.3f, dn_b = -0.2f, dn_c = -0.15f, dn_m = -0.2f, dn_y = 0.2f, dn_rng = 0.75f, dn_st = 0.5f, hs_rgb_enable = 1, hs_r = 0.25f, hs_g = 0.2f, hs_b = 0.2f, hs_rng_r = 0.5f, hs_rng_g = 2.0f, hs_rng_b = 0.5f, hs_cmy_enable = 0, hs_c = 0.0f, hs_m = 0.0f, hs_y = 0.0f, hs_rng_c = 0.0f, hs_rng_m = 0.0f, hs_rng_y = 0.0f, hs_st_c = 0.6f, hs_st_y = 0.6f, hf_enable = 1, hf_r0 = 0.25f, hf_r1 = -0.6f, hf_g0 = 0.1f, hf_g1 = -0.6f, hf_b0 = 0.2f, hf_b1 = -0.3f, hf_st_r = 1.0f, hf_st_g = 2.0f, hf_st_b = -1.0f;
  } 
  else if (look==2) { // default-highcon
    tn_con = 1.4f, tn_toe = 0.001f, tn_off = 0.001f, tn_mcon_enable = 1, tn_mcon = 1.0f, tn_mcon_w = 0.6f, tn_mcon_rp = 0.0f, cwp = 0, rs_sa = 0.45f, rs_rw = 0.2f, rs_bw = 0.2f, pt_cmp = 0.3f, pt_cmp_hdr = 0.7f, pt_cmp_r = 0.25f, pt_cmp_g = 0.0f, pt_cmp_b = 0.5f, pt_mid_enable = 1, pt_mid_low = 1.2f, pt_mid_high = 0.0f, pt_softclip = 1, dn_enable = 1, dn_r = -0.33f, dn_g = -0.3f, dn_b = -0.2f, dn_c = -0.15f, dn_m = -0.2f, dn_y = 0.2f, dn_rng = 0.75f, dn_st = 0.5f, hs_rgb_enable = 1, hs_r = 0.25f, hs_g = 0.2f, hs_b = 0.2f, hs_rng_r = 0.5f, hs_rng_g = 2.0f, hs_rng_b = 0.5f, hs_cmy_enable = 0, hs_c = 0.0f, hs_m = 0.0f, hs_y = 0.0f, hs_rng_c = 0.0f, hs_rng_m = 0.0f, hs_rng_y = 0.0f, hs_st_c = 0.6f, hs_st_y = 0.6f, hf_enable = 1, hf_r0 = 0.25f, hf_r1 = -0.6f, hf_g0 = 0.1f, hf_g1 = -0.6f, hf_b0 = 0.2f, hf_b1 = -0.3f, hf_st_r = 1.0f, hf_st_g = 2.0f, hf_st_b = -1.0f;
  } 
  else if (look==3) { // filmish
    tn_con = 1.4f, tn_toe = 0.001f, tn_off = 0.001f, tn_mcon_enable = 1, tn_mcon = 1.0f, tn_mcon_w = 0.6f, tn_mcon_rp = 0.0f, cwp = 2, rs_sa = 0.4f, rs_rw = 0.2f, rs_bw = 0.1f, pt_cmp = 0.3f, pt_cmp_hdr = 0.7f, pt_cmp_r = 0.0f, pt_cmp_g = 0.0f, pt_cmp_b = 0.5f, pt_mid_enable = 1, pt_mid_low = 1.3f, pt_mid_high = 0.0f, pt_softclip = 1, dn_enable = 1, dn_r = -0.4f, dn_g = -0.35f, dn_b = -0.2f, dn_c = 0.0f, dn_m = -0.3f, dn_y = -0.1f, dn_rng = 0.9f, dn_st = 0.8f, hs_rgb_enable = 1, hs_r = 0.4f, hs_g = 0.4f, hs_b = 0.3f, hs_rng_r = 0.8f, hs_rng_g = 1.5f, hs_rng_b = 0.8f, hs_cmy_enable = 1, hs_c = 0.4f, hs_m = 0.4f, hs_y = 0.6f, hs_rng_c = 0.0f, hs_rng_m = 1.0f, hs_rng_y = -1.0f, hs_st_c = 0.6f, hs_st_y = 0.5f, hf_enable = 1, hf_r0 = 0.25f, hf_r1 = -0.6f, hf_g0 = -0.3f, hf_g1 = -0.6f, hf_b0 = 0.2f, hf_b1 = -0.4f, hf_st_r = 1.0f, hf_st_g = 2.0f, hf_st_b = -1.0f;
  } 
  else if (look==4) { // colorful
    tn_con = 1.4f, tn_toe = 0.001f, tn_off = 0.001f, tn_mcon_enable = 1, tn_mcon = 1.0f, tn_mcon_w = 0.6f, tn_mcon_rp = 0.0f, cwp = 0, rs_sa = 0.6f, rs_rw = 0.3f, rs_bw = 0.3f, pt_cmp = 0.3f, pt_cmp_hdr = 0.7f, pt_cmp_r = 0.0f, pt_cmp_g = 0.0f, pt_cmp_b = 0.75f, pt_mid_enable = 1, pt_mid_low = 1.5f, pt_mid_high = 0.3f, pt_softclip = 1, dn_enable = 1, dn_r = -0.5f, dn_g = -0.5f, dn_b = -0.25f, dn_c = -0.25f, dn_m = -0.25f, dn_y = 0.1f, dn_rng = 0.75f, dn_st = 0.5f, hs_rgb_enable = 1, hs_r = 0.25f, hs_g = 0.2f, hs_b = 0.2f, hs_rng_r = 0.5f, hs_rng_g = 2.0f, hs_rng_b = 0.5f, hs_cmy_enable = 0, hs_c = 0.0f, hs_m = 0.0f, hs_y = 0.0f, hs_rng_c = 0.0f, hs_rng_m = 0.0f, hs_rng_y = 0.0f, hs_st_c = 0.6f, hs_st_y = 0.6f, hf_enable = 1, hf_r0 = 0.25f, hf_r1 = -0.6f, hf_g0 = 0.2f, hf_g1 = -0.6f, hf_b0 = 0.2f, hf_b1 = -0.3f, hf_st_r = 1.0f, hf_st_g = 2.0f, hf_st_b = -2.0f;
  }
  
  /* Un-Comment below this line to enable custom look creation
  ---------------------------------------------------------------------------------------*/

  else if (look==5) { // custom
    tn_con =_tn_con, tn_toe =_tn_toe, tn_off =_tn_off, tn_mcon_enable =_tn_mcon_enable, tn_mcon =_tn_mcon, tn_mcon_w =_tn_mcon_w, tn_mcon_rp =_tn_mcon_rp, rs_sa =_rs_sa, rs_rw =_rs_rw, rs_bw =_rs_bw, pt_cmp =_pt_cmp, pt_cmp_hdr =_pt_cmp_hdr, pt_cmp_r =_pt_cmp_r, pt_cmp_g =_pt_cmp_g, pt_cmp_b =_pt_cmp_b, pt_mid_enable =_pt_mid_enable, pt_mid_low =_pt_mid_low, pt_mid_high =_pt_mid_high, pt_softclip =_pt_softclip, dn_enable =_dn_enable, dn_r =_dn_r, dn_g =_dn_g, dn_b =_dn_b, dn_c =_dn_c, dn_m =_dn_m, dn_y =_dn_y, dn_rng =_dn_rng, dn_st =_dn_st, hs_rgb_enable =_hs_rgb_enable, hs_r =_hs_r, hs_g =_hs_g, hs_b =_hs_b, hs_rng_r =_hs_rng_r, hs_rng_g =_hs_rng_g, hs_rng_b =_hs_rng_b, hs_cmy_enable =_hs_cmy_enable, hs_c =_hs_c, hs_m =_hs_m, hs_y =_hs_y, hs_rng_c =_hs_rng_c, hs_rng_m =_hs_rng_m, hs_rng_y =_hs_rng_y, hs_st_c =_hs_st_c, hs_st_y =_hs_st_y, hf_enable =_hf_enable, hf_r0 =_hf_r0, hf_r1 =_hf_r1, hf_g0 =_hf_g0, hf_g1 =_hf_g1, hf_b0 =_hf_b0, hf_b1 =_hf_b1, hf_st_r =_hf_st_r, hf_st_g =_hf_st_g, hf_st_b =_hf_st_b;
  
    if (_cwp==d65) cwp = 0;
    else if (_cwp==d60) cwp = 1;
    else if (_cwp==d55) cwp = 2;
    else if (_cwp==d50) cwp = 3;
  }

  /*---------------------------------------------------------------------------------------
  Un-Comment above this line to enable custom look creation   */


  float3x3 in_to_xyz;
  if (in_gamut == i_xyz) in_to_xyz = identity();
  else if (in_gamut == i_ap0) in_to_xyz = matrix_ap0_to_xyz;
  else if (in_gamut == i_ap1) in_to_xyz = matrix_ap1_to_xyz;
  else if (in_gamut == i_p3d65) in_to_xyz = matrix_p3d65_to_xyz;
  else if (in_gamut == i_rec2020) in_to_xyz = matrix_rec2020_to_xyz;
  else if (in_gamut == i_rec709) in_to_xyz = matrix_rec709_to_xyz;
  else if (in_gamut == i_awg3) in_to_xyz = matrix_arriwg3_to_xyz;
  else if (in_gamut == i_awg4) in_to_xyz = matrix_arriwg4_to_xyz;
  else if (in_gamut == i_rwg) in_to_xyz = matrix_redwg_to_xyz;
  else if (in_gamut == i_sgamut3) in_to_xyz = matrix_sonysgamut3_to_xyz;
  else if (in_gamut == i_sgamut3cine) in_to_xyz = matrix_sonysgamut3cine_to_xyz;
  else if (in_gamut == i_vgamut) in_to_xyz = matrix_vgamut_to_xyz;
  else if (in_gamut == i_bmdwg) in_to_xyz = matrix_bmdwg_to_xyz;
  else if (in_gamut == i_egamut) in_to_xyz = matrix_egamut_to_xyz;
  else if (in_gamut == i_egamut2) in_to_xyz = matrix_egamut2_to_xyz;
  else if (in_gamut == i_davinciwg) in_to_xyz = matrix_davinciwg_to_xyz;

  int eotf;
  if (EOTF == lin)          eotf = 0;
  else if (EOTF == srgb)    eotf = 1;
  else if (EOTF == rec1886) eotf = 2;
  else if (EOTF == dci)     eotf = 3;
  else if (EOTF == pq)      eotf = 4;
  else if (EOTF == hlg)     eotf = 5;


  // Linearize if a non-linear input oetf / transfer function is selected
  if (in_oetf == ioetf_davinci_intermediate) { // Davinci Intermediate
    rgb.x = oetf_davinci_intermediate(rgb.x);
    rgb.y = oetf_davinci_intermediate(rgb.y);
    rgb.z = oetf_davinci_intermediate(rgb.z);
  } else if (in_oetf == ioetf_filmlight_tlog) { // Filmlight T-Log
    rgb.x = oetf_filmlight_tlog(rgb.x);
    rgb.y = oetf_filmlight_tlog(rgb.y);
    rgb.z = oetf_filmlight_tlog(rgb.z);
  } else if (in_oetf == ioetf_arri_logc3) { // Arri LogC3
    rgb.x = oetf_arri_logc3(rgb.x);
    rgb.y = oetf_arri_logc3(rgb.y);
    rgb.z = oetf_arri_logc3(rgb.z);
  } else if (in_oetf == ioetf_arri_logc4) { // Arri LogC4
    rgb.x = oetf_arri_logc4(rgb.x);
    rgb.y = oetf_arri_logc4(rgb.y);
    rgb.z = oetf_arri_logc4(rgb.z);
  } else if (in_oetf == ioetf_panasonic_vlog) { // Panasonic V-Log
    rgb.x = oetf_panasonic_vlog(rgb.x);
    rgb.y = oetf_panasonic_vlog(rgb.y);
    rgb.z = oetf_panasonic_vlog(rgb.z);
  } else if (in_oetf == ioetf_sony_slog3) { // Sony S-Log3
    rgb.x = oetf_sony_slog3(rgb.x);
    rgb.y = oetf_sony_slog3(rgb.y);
    rgb.z = oetf_sony_slog3(rgb.z);
  } else if (in_oetf == ioetf_fuji_flog) { // Fuji F-Log
    rgb.x = oetf_fujifilm_flog(rgb.x);
    rgb.y = oetf_fujifilm_flog(rgb.y);
    rgb.z = oetf_fujifilm_flog(rgb.z);
  }


  /***************************************************
    Tonescale Constraint Calculations
    These could be pre-calculated but there is no way to do this in DCTL.
    Anything that is const should be precalculated and not run per-pixel
    --------------------------------------------------*/
  const float ts_y1 = tn_Lp/100.0f;
  const float ts_x0 = 0.18f + tn_off;
  const float ts_y0 = tn_Lg/100.0f*(1.0f + tn_gb*_log2f(ts_y1));
  const float ts_m = compress_toe_quadratic(ts_y1, tn_toe, 1);
  const float ts_s0 = compress_toe_quadratic(ts_y0, tn_toe, 1);
  const float ts_s = ts_x0*(_powf(ts_s0/ts_m, -1.0f/tn_con) - 1.0f);
  const float ts_dsc = eotf==4 ? 0.01 : eotf==5 ? 0.1 : 100.0f/tn_Lp;
  

  // Convert from input gamut into P3-D65
  rgb = vdot(in_to_xyz, rgb);
  rgb = vdot(matrix_xyz_to_p3d65, rgb);

  // Rendering Space: "Desaturate" to control scale of the color volume in the rgb ratios
  float sat_L = rgb.x*rs_rw + rgb.y*(1-(rs_rw + rs_bw)) + rgb.z*rs_bw;
  rgb = sat_L*rs_sa + rgb*(1.0f - rs_sa);
  
  // Offset
  rgb += tn_off;

  /***************************************************
    Midtone Contrast Module
  --------------------------------------------------*/
  if (tn_mcon_enable) {
    float mcon_m = _powf(2.0f, -tn_mcon);
    float mcon_w = tn_mcon_w/4.0f;
    mcon_w *= mcon_w;

    // Normalize for ts_x0 intersection constraint
    rgb *= compress_toe_cubic(ts_x0, mcon_m, mcon_w, 1)/ts_x0;
    // Apply per-channel midtone contrast
    float3 mcon_rgb = rgb;
    mcon_rgb.x = compress_toe_cubic(rgb.x, mcon_m, mcon_w, 0);
    mcon_rgb.y = compress_toe_cubic(rgb.y, mcon_m, mcon_w, 0);
    mcon_rgb.z = compress_toe_cubic(rgb.z, mcon_m, mcon_w, 0);
    if (tn_mcon_rp > 0.0f) {
      // Scale for ratio-preserving midtone contrast
      float mcon_nm = hypotf3(clampminf3(rgb, 0.0f))/_sqrtf(3.0f);
      float mcon_sc = (mcon_nm*mcon_nm + mcon_m*mcon_w)/(mcon_nm*mcon_nm + mcon_w);
      rgb = mcon_sc*rgb*tn_mcon_rp + mcon_rgb*(1.0f - tn_mcon_rp);
    } 
    else rgb = mcon_rgb;
  }

  // Norm and RGB Ratios
  float tsn = hypotf3(clampminf3(rgb, 0.0f))/_sqrtf(3.0f);
  rgb = sdivf3f(clampminf3(rgb, -2.0f), tsn);
  
  // Apply tonescale
  tsn = compress_hyperbolic(tsn, ts_s, tn_con);

  // RGB CMY Hue Angles
  float mn = _fmaxf(0.0f, fminf3(rgb));
  float3 ha_rgb = narrow_ha(rgb - mn);
  float3 ha_cmy = narrow_ha(clampminf3(1.0f - rgb, 0.0f));

  // Purity Compression Factor  
  // Lerp from pt_cmp at 100 nits to pt_cmp_hdr at 1000 nits
  const float pt_cmp_Lf = (tn_Lp - 100.0f)/900.0f;
  const float pt_cmp_p = 1.0f/(pt_cmp*(1.0f - pt_cmp_Lf) + pt_cmp_hdr*pt_cmp_Lf);
  // Vary by primary hue angle
  float tsn_pt_cmp = spowf(tsn, pt_cmp_p/((pt_cmp_r*ha_rgb.x + 1.0f)*(pt_cmp_g*ha_rgb.y + 1.0f)*(pt_cmp_b*ha_rgb.z + 1.0f)));
    

  /***************************************************
    Hue Focus
  --------------------------------------------------*/
  if (hf_enable) {
    float3 hf_rgb = make_float3(
      _powf(mn, _powf(2.0f, -hf_st_r)),
      _powf(mn, _powf(2.0f, -hf_st_g)),
      _powf(mn, _powf(2.0f, -hf_st_b)));
    hf_rgb *= ha_rgb;
    float3 hff = make_float3(
      (hf_r0*(tsn - 1.0f) - hf_r1*tsn),
      (hf_g0*(tsn - 1.0f) - hf_g1*tsn),
      (hf_b0*(tsn - 1.0f) - hf_b1*tsn)); // https://www.desmos.com/calculator/gzbgov62hl
    hff *= hf_rgb;
    hff = make_float3(
      hff.y + hff.z + 1.0f,
      hff.x + hff.z + 1.0f, 
      hff.x + hff.y + 1.0f);
    rgb *= hff;
  }


  /***************************************************
    Hue Shift
  --------------------------------------------------*/
  // Hue Shift RGB
  if (hs_rgb_enable) {
    float3 hs_rgb = make_float3(
      _powf(tsn_pt_cmp, _powf(2.0f, -hs_rng_r)),
      _powf(tsn_pt_cmp, _powf(2.0f, -hs_rng_g)),
      _powf(tsn_pt_cmp, _powf(2.0f, -hs_rng_b)));
    hs_rgb *= ha_rgb;
    float3 hsf = make_float3(hs_rgb.x*hs_r, hs_rgb.y*-hs_g, hs_rgb.z*-hs_b);
    hsf = make_float3(hsf.z - hsf.y, hsf.x - hsf.z, hsf.y - hsf.x);
    rgb += hsf;
  }

  // Hue Shift CMY
  if (hs_cmy_enable) {
    float3 hs_cmy = make_float3(
      _powf(1.0f - tsn, _powf(2.0f, -hs_rng_c)),
      _powf(1.0f - tsn, _powf(2.0f, -hs_rng_m)),
      _powf(1.0f - tsn, _powf(2.0f, -hs_rng_y)));
    hs_cmy *= make_float3(_powf(ha_cmy.x, 1.0f/hs_st_c), ha_cmy.y, _powf(ha_cmy.z, 1.0f/hs_st_y)); // limit C and Y strength
    float3 hsf = make_float3(hs_cmy.x*-hs_c, hs_cmy.y*hs_m, hs_cmy.z*hs_y);
    hsf = make_float3(hsf.z - hsf.y, hsf.x - hsf.z, hsf.y - hsf.x);
    rgb += hsf;
  }
  

  /***************************************************
    Density
  --------------------------------------------------*/
  if (dn_enable) {
    float dn_f = (dn_r*ha_rgb.x + 1.0f)*(dn_g*ha_rgb.y + 1.0f)*(dn_b*ha_rgb.z + 1.0f);
    dn_f *= (dn_c*ha_cmy.x + 1.0f)*(dn_m*ha_cmy.y + 1.0f)*(dn_y*ha_cmy.z + 1.0f);
    float dn_lim = spowf(dn_f>1.0f ? (1.0f - tsn) : tsn, 1.0f - dn_rng)*(1.0f - spowf(mn, 1.0f/(_fmaxf(1e-6, 1.0f - dn_st))));
    dn_f = dn_f*dn_lim + 1.0f - dn_lim;
    rgb *= dn_f;
  }

  /***************************************************
    Midrange Purity
  --------------------------------------------------*/
  tsn_pt_cmp = 1.0f - tsn_pt_cmp;
  if (pt_mid_enable) {
    float pt_mid_f = tsn*(pt_mid_high - pt_mid_low) + pt_mid_low;
    float mn2 = mn*mn;
    pt_mid_f = pt_mid_f*mn2 + 1.0f - mn2;
    tsn_pt_cmp *= pt_mid_f;
  }

  // Purity Compression
  rgb = rgb*tsn_pt_cmp + 1.0f - tsn_pt_cmp;

  // Inverse Rendering Space
  sat_L = rgb.x*rs_rw + rgb.y*(1-(rs_rw + rs_bw)) + rgb.z*rs_bw;
  rgb = (sat_L*rs_sa - rgb)/(rs_sa - 1.0f);
  
  // Convert to final display gamut
  if (display_gamut == P3D65) {
    if (cwp==1) rgb = vdot(matrix_p3_to_p3_d60, rgb);
    if (cwp==2) rgb = vdot(matrix_p3_to_p3_d55, rgb);
    if (cwp==3) rgb = vdot(matrix_p3_to_p3_d50, rgb);
  }
  if (display_gamut==Rec709) {
    if (cwp==0) rgb = vdot(matrix_p3_to_rec709_d65, rgb);
    if (cwp==1) rgb = vdot(matrix_p3_to_rec709_d60, rgb);
    if (cwp==2) rgb = vdot(matrix_p3_to_rec709_d55, rgb);
    if (cwp==3) rgb = vdot(matrix_p3_to_rec709_d50, rgb);
  }

  // Purity Softclip
  if (pt_softclip) {
    rgb = 1.0f - rgb;
    rgb.x = compress_powerp(rgb.x, 0.02f);
    rgb.y = compress_powerp(rgb.y, 0.05f);
    rgb.z = compress_powerp(rgb.z, 0.015f);
    rgb = 1.0f - rgb;
  }

  // Final tonescale scaling 
  tsn *= ts_m;
  tsn = compress_toe_quadratic(tsn, tn_toe, 0);
  tsn *= ts_dsc;
  rgb *= tsn;

  // Clamp
  rgb = clampf3(rgb, 0.0f, 1.0f);

  // Rec.2020 (P3 Limited)
  if (display_gamut == Rec2020) {
    rgb = vdot(matrix_p3_to_rec2020, rgb);
  }

  // Apply inverse Display EOTF
  float eotf_p = 2.0f + eotf * 0.2f;
  if ((eotf > 0) && (eotf < 4)) {
    rgb = spowf3(rgb, 1.0f/eotf_p);
  } else if (eotf == 4) {
    rgb = eotf_pq(rgb, 1);
  } else if (eotf == 5) {
    rgb = eotf_hlg(rgb, 1);
  }
  
  return rgb;
}